package io.github.myrsstas.musicplayer.views;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import io.github.myrsstas.musicplayer.controllers.FileScannerController;
import io.github.myrsstas.musicplayer.controllers.FileScannerControllerImpl;
import io.github.myrsstas.musicplayer.controllers.MusicScannerController;
import io.github.myrsstas.musicplayer.controllers.MusicScannerControllerImpl;
import io.github.myrsstas.musicplayer.models.SongModel;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileSystemView;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.Method;
import java.util.List;
import java.util.ArrayList;
import java.util.ResourceBundle;

import static java.lang.System.out;

public class SongsListFormView extends JFrame {
    private JPanel songListPanel;
    private JButton openFolderButton;
    private JList songJList;
    private JScrollPane songListScrollPanel;
    private JLabel songTitlesLabel;
    private String folderPath;
    private ArrayList<SongModel> songs;
    private List fileList;

    private DefaultListModel songsModel; //List Model that we need for JList

//    private FileScannerController fileScannerController;
//    private MusicScannerController musicScannerController;


    public SongsListFormView() {

        FileScannerController fileScannerController = new FileScannerControllerImpl();
        MusicScannerController musicScannerController = new MusicScannerControllerImpl(fileScannerController);

        openFolderButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                folderPath = selectFolder();
                fileList = musicScannerController.getMusicFilesInDirectoryPath(folderPath);
                songs = (ArrayList<SongModel>) musicScannerController.convertFilesToSongs(fileList);
                songTitlesLabel.setVisible(true);
                loadSongsToJList(songs);

            }
        });


        songJList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedIndex = songJList.getSelectedIndex();
                    if (selectedIndex >= 0) {
                        SongModel songModelChosen = songs.get(selectedIndex);
                        openNextForm(songModelChosen);
                    }
                }

            }
        });

    }

    private void openNextForm(SongModel chosenSong) {
        new PlaySongFormView(chosenSong);
        this.setVisible(false);
        this.dispose();

    }

    private void loadSongsToJList(List<SongModel> songs) {

        songsModel = new DefaultListModel();
        songJList.setModel(songsModel);
        songsModel.removeAllElements();

        for (SongModel song : songs) {
            out.println("adding song to list " + song.getTitle());
            songsModel.addElement(song.getTitle());
        }

        songJList.setModel(songsModel);

    }


    static void setUpListFormView() {
        JFrame songListFrame = new JFrame("Music App");
        songListFrame.setContentPane(new SongsListFormView().songListPanel);
        songListFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        songListFrame.setLocationRelativeTo(null);
        songListFrame.pack();
        songListFrame.setVisible(true);
    }

    private String selectFolder() {
        JFileChooser fileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int responce = fileChooser.showOpenDialog(null);
        if (responce == JFileChooser.APPROVE_OPTION) {
//            folderName.setText(fileChooser.getSelectedFile().getAbsolutePath());
            return fileChooser.getSelectedFile().getAbsolutePath();
        }
        return null;
    }


    public static void main(String[] args) {
        setUpListFormView();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        songListPanel = new JPanel();
        songListPanel.setLayout(new GridLayoutManager(5, 5, new Insets(0, 0, 0, 0), -1, -1));
        final Spacer spacer1 = new Spacer();
        songListPanel.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        openFolderButton = new JButton();
        this.$$$loadButtonText$$$(openFolderButton, this.$$$getMessageFromBundle$$$("Messages", "openFolderButton"));
        songListPanel.add(openFolderButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        songListScrollPanel = new JScrollPane();
        songListPanel.add(songListScrollPanel, new GridConstraints(3, 1, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        songJList = new JList();
        songJList.setSelectionMode(0);
        songListScrollPanel.setViewportView(songJList);
        final Spacer spacer2 = new Spacer();
        songListPanel.add(spacer2, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        songListPanel.add(spacer3, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        songListPanel.add(spacer4, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer5 = new Spacer();
        songListPanel.add(spacer5, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer6 = new Spacer();
        songListPanel.add(spacer6, new GridConstraints(3, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer7 = new Spacer();
        songListPanel.add(spacer7, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        songTitlesLabel = new JLabel();
        songTitlesLabel.setEnabled(true);
        songTitlesLabel.setText("Song Titles");
        songTitlesLabel.setVisible(false);
        songListPanel.add(songTitlesLabel, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return songListPanel;
    }

}
